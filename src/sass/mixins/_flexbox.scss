/*    Displays an element as an block-level flex container.*/@mixin flexbox {	display: flex;}/*    Displays an element as an inline-level flex container.*/@mixin inline-flex {	display: inline-flex;}/*    This property specifies the direction of the flexible items.    default: row    values: row, row-reverse, column, column-reverse, initial, inherit*/@mixin flex-direction($direction: row) {	flex-direction: $direction;}/*    This property specifies whether the flexible items should wrap or not.    default: nowrap    values: nowrap, wrap, wrap-reverse, initial, inherit*/@mixin flex-wrap($property: nowrap) {	flex-wrap: $property;}/*    This property is a shorthand property for the flex-direction and the flex-wrap properties.    default: row nowrap    values: flex-direction flex-wrap, initial, inherit*/@mixin flex-flow($direction: row, $wrap: nowrap) {	flex-flow: $direction $wrap;}/*    This property controls the order in which they appear in the flex container.    default: 0    values: number, initial, inherit*/@mixin order($int: 0) {	order: $int;}/*    This property specifies how much the item will grow relative to the rest of the flexible items inside the same container.    default: 0    values: number, initial, inherit*/@mixin flex-grow($int: 0) {	flex-grow: $int;}/*    This property specifies how the item will shrink relative to the rest of the flexible items inside the same container.    default: 1    values: number, initial, inherit*/@mixin flex-shrink($int: 1) {	flex-shrink: $int;}/*   This property specifies the initial length of a flexible item.    default: auto    values: number, auto, initial, inherit*/@mixin flex-basis($property: auto) {	flex-basis: $property;}/*    This property specifies the length of the item, relative to the rest of the flexible items inside the same container.    default: 0 1 auto    values: flex-grow flex-shrink flex-basis, auto, initial, inherit*/@mixin flex($grow: 0, $shrink: 1, $basis: auto) {    flex: $grow $shrink $basis;}/*    This property aligns the flexible container's items when the items do not use all available space on the main-axis.    For example horizontally    default: flex-start    values: flex-start, flex-end, center, space-between, space-around, initial, inherit*/@mixin justify-content($property: flex-start) {	justify-content: $property;}/*    This property aligns the flexible container's items when the items do not use all available space on the main-axis.    For example horizontally    default: flex-start    values: flex-start, flex-end, center, space-between, space-around, initial, inherit*/@mixin align-items($property: stretch) {	align-items: $property;}/*    This property specifies the alignment for the selected item inside the flexible container.    default: auto    values: auto, stretch, center, flex-start, flex-end, baseline, initial, inherit*/@mixin align-self($property: auto) {	align-self: $property;}/*   This property modifies the behavior of the flex-wrap property.   It is similar to align-items, but instead of aligning flex items, it aligns flex lines.   default: stretch   values: stretch, center, flex-start, flex-end, space-between, space-around, initial, inherit*/@mixin align-content($property: stretch) {	align-content: $property;}